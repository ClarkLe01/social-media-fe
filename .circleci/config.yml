# CircleCI configuration file
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.1
  docker: circleci/docker@2.2.0
  aws-ecr: circleci/aws-ecr@8.1.2 # use the AWS ECR orb
  aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
  aws-cli: circleci/aws-cli@3.1.1 # use the AWS CLI orb

executors:
  frontend-executor:
    docker:
      - image: cimg/node:18.5

jobs:
  # Job one with a unique name
  test-frontend:
    executor: frontend-executor
    environment:
      DEBUG: 1
      API_HOST: localhost
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run:
          name: Run unit test
          command: |
            pip install -r requirements.txt
            pip install coverage
            pip install pytest-django
            python manage.py migrate
            coverage run -m pytest --junitxml=test-results/junit.xml
            coverage html
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

  build-and-push-frontend:
    executor: docker/docker
    environment:
      DEBUG: 1
      API_HOST: localhost
      DOCKER_IMAGE: waflol/social-media-fe
      DOCKER_TAG: lastest
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Waiting for Postgres to be ready
          command: |
            chmod +x ./entrypoint.prod.sh
            ./entrypoint.prod.sh
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD
      - run:
          name: docker/build
          command: |
            docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
      - docker/push:
          digest-path: /tmp/digest.txt
          image: $DOCKER_IMAGE
          tag: $DOCKER_TAG
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  build-and-push-ecr:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
workflows:
  # Name of workflow
  pipeline:
    # List of jobs that will run
    jobs:
      - test-frontend
      - build-and-push-frontend:
          requires:
            - test-frontend
          # filters:
          #   branches:
          #     only:
          #       - main
      - aws-ecr/build-and-push-image: # Use the pre-defined `build-and-push-image` job
          requires:
            - test-frontend
          dockerfile: Dockerfile
          path: .
          profile-name: waflol
          repo: social-web-api
          tag: latest # default - latest
